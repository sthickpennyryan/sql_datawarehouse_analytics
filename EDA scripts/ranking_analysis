6) ranking analysis

---- which 5 products generate the highest revenue
SELECT TOP 5
p.product_name,
SUM(s.sales_amount) AS total_revenue
FROM  gold.fact_sales s
LEFT  JOIN gold.dim_products p
ON p.product_key = s.product_key
GROUP BY p.product_name
ORDER by total_revenue DESC 
--- 2  ways same one. windows function gives us  a lot more flexibilty to query

SELECT * FROM (
SELECT 
p.product_name,
SUM(s.sales_amount) AS total_revenue,
ROW_NUMBER() OVER(ORDER BY SUM(s.sales_amount) DESC) AS ranked_products
FROM  gold.fact_sales s
LEFT  JOIN gold.dim_products p
ON p.product_key = s.product_key
GROUP BY p.product_name
) t
WHERE ranked_products <= 5


--- What are the 5 worst-performing products in terms of sales?

SELECT TOP 5
p.product_name,
SUM(s.sales_amount) AS total_revenue
FROM  gold.fact_sales s
LEFT  JOIN gold.dim_products p
ON p.product_key = s.product_key
GROUP BY p.product_name
ORDER by total_revenue ASC
--- window functionsa re more flexible and complex


--- find the top  10 customers who have generated the highest revenue 
SELECT TOP 10
	c.customer_key,
	c.first_name,
	c.last_name,
	SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
	ON c.customer_key = f.customer_key	
GROUP BY 
c.customer_key,
c.first_name,
c.last_name
ORDER BY total_revenue DESC


--- The 3 customers with the fewest orders placed
SELECT TOP 3
	c.customer_key,
	c.first_name,
	c.last_name,
	COUNT(DISTINCT order_number) AS total_orders
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON c.customer_key = f.customer_key	
GROUP BY 
c.customer_key,
c.first_name,
c.last_name
ORDER BY total_orders ASC
