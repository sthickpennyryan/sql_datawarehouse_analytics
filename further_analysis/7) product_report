/* 
=========================
7) Products Report
=========================
Purpose:
	- This report consolidates key product metrics and changes
=========================
Highlights:
	1) Gathers essential fields such as product name, category, subcategory, and cost
	2) Segments products by revenue to identify High-Performers, Mid-Range, or Low-Performers
	3) Aggregates product-level metrics:
		- total orders
		- total sales
		- total quantity sold
		- total customers (unique)
		- lifespan (in months)
	4) Calculates valueable KPIs:
		- recency (months since last sale)
		- average order revenue (AOR)
		- average monthly revenue
	=========================
	*/ 



  IF OBJECT_ID('gold.report_product', 'V') IS NOT NULL
	DROP VIEW gold.report_product
GO

CREATE VIEW gold.report_product AS 
WITH base_query AS (

SELECT
	s.order_number,
	s.order_date,
	s.customer_key,
	s.sales_amount,
	s.quantity,
	p.product_key,
	p.product_name,
	p.category,
	p.subcategory,
	p.cost
FROM gold.fact_sales s
LEFT JOIN gold.dim_products p
	ON p.product_key = s.product_key
WHERE order_date IS NOT NULL
),

--- product aggregation query
product_aggregation AS (
SELECT
	product_key,
	product_name,
	category,
	subcategory,
	cost,
	DATEDIFF(MONTH, MIN(order_date), MAX(order_date)) AS lifespan,
	MAX(order_date) AS last_sale_date,
	COUNT(DISTINCT order_number) AS total_orders,
	COUNT(DISTINCT customer_key) AS total_customers,
	SUM(sales_amount) AS total_sales,
	SUM(quantity) AS total_quantity,
	ROUND(AVG(CAST(sales_amount AS FLOAT) / NULLIF(quantity, 0)), 1) AS avg_sales_price --- for in the event that there is 0 quantity
FROM base_query

GROUP BY 
	product_key,
	product_name,
	category,
	subcategory,
	cost
)
SELECT 
	product_key,
	product_name,
	category,
	subcategory,
	cost,
	last_sale_date,
	DATEDIFF(month, last_sale_date, GETDATE()) AS recency,
CASE
	WHEN total_sales > 50000 THEN 'High-Performer'
	WHEN total_sales >= 10000 THEN 'Mid-Range'
	ELSE 'Low-Performer'
END AS product_segment,
	lifespan,
	total_orders,
	total_sales,
	total_quantity,
	total_customers,
	avg_sales_price,
	---- average order revenue
CASE 
	WHEN total_orders = 0 THEN 0
	ELSE total_sales / total_orders
END AS avg_order_revenue,
---- monthly revenue
CASE 
	WHEN lifespan = 0 THEN total_sales
	ELSE total_sales / lifespan
END AS avg_monthly_revenue
FROM product_aggregation

SELECT * FROM gold.report_product
